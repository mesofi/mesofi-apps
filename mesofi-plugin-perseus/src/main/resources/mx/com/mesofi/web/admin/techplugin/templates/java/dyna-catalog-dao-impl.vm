#set ($classNameDaoInstance = "${classNameDao.substring(0,1).toLowerCase()}${classNameDao.substring(1)}")
#set ($classNameVoInstance = "${classNameVo.substring(0,1).toLowerCase()}${classNameVo.substring(1)}")
#set ($classNameSearchInstance = "${classNameSearch.substring(0,1).toLowerCase()}${classNameSearch.substring(1)}")
/*
 * COPYRIGHT. Mesofi ${year}. ALL RIGHTS RESERVED.
 *
 * This software is only to be used for the purpose for which it has been
 * provided. No part of it is to be reproduced, disassembled, transmitted,
 * stored in a retrieval system nor translated in any human or computer
 * language in any way or for any other purposes whatsoever without the
 * prior written consent of Mesofi.
 */
package ${packageName}.catalogs.${moduleName}.dao;


import java.util.ArrayList;
#foreach( ${field} in ${fields} )
#if (${field.fieldType} == "Date")
import java.util.Date;
#break
#end
#end
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.sql.DataSource;

import ${packageName}.catalogs.${moduleName}.vo.${classNameVo};
import ${packageName}.common.AbstractDao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/**
 * Direct implementation for ${className}.
 * 
 * @author Mesofi
 * @since ${date}
 */
@Repository
public class ${className}Impl extends AbstractDao implements ${className} {
    
    @Autowired
    private Properties ${classNameDaoInstance};
    
    @Autowired
    public ${className}Impl(DataSource dataSource) {
        super(dataSource);
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public void saveRecord(${classNameVo} ${classNameVoInstance}) {
        String sql = ${classNameDaoInstance}.getProperty("insert.current.record");
        
        List<Object> params = new ArrayList<Object>();
        
#foreach( ${field} in ${fields} )
#set ($fieldJavaType = "${field.fieldJavaType.substring(0,1).toUpperCase()}${field.fieldJavaType.substring(1)}")
        params.add(${classNameVoInstance}.get${fieldJavaType}()); 
#end

        validateAffectedRecords(getJdbcTemplate().update(sql, params.toArray()));
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public void updateRecord(${classNameVo} ${classNameVoInstance}) {
        String sql = ${classNameDaoInstance}.getProperty("update.current.record");
        
        List<Object> params = new ArrayList<Object>();
        
#foreach( ${field} in ${fields} )
#if( ${field.primaryKey} == false )
#set ($fieldJavaType = "${field.fieldJavaType.substring(0,1).toUpperCase()}${field.fieldJavaType.substring(1)}")
        params.add(${classNameVoInstance}.get${fieldJavaType}());
#end
#end
#foreach( ${field} in ${fields} )
#if( ${field.primaryKey} )
#set ($fieldJavaType = "${field.fieldJavaType.substring(0,1).toUpperCase()}${field.fieldJavaType.substring(1)}")
        params.add(${classNameVoInstance}.get${fieldJavaType}());
#end
#end

        validateAffectedRecords(getJdbcTemplate().update(sql, params.toArray()));
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public List<${classNameVo}> getData() {
        List<${classNameVo}> data = new ArrayList<${classNameVo}>();
        String sql = ${classNameDaoInstance}.getProperty("select.existing.records");
        
        List<Map<String, Object>> rows = null;
        rows = getJdbcTemplate().queryForList(sql);

        populateData(data, rows);
        return data;
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public List<${classNameVo}> getData(${classNameVo} ${classNameSearchInstance}) {
        List<${classNameVo}> data = new ArrayList<${classNameVo}>();
        List<Object> params = new ArrayList<Object>();
        StringBuilder qry = new StringBuilder();
        String sql = ${classNameDaoInstance}.getProperty("select.existing.records");
        
        qry.append(sql);
        qry.append(" ");
#foreach( ${field} in ${fields} )
#set ($fieldJavaType = "${field.fieldJavaType.substring(0,1).toUpperCase()}${field.fieldJavaType.substring(1)}")
@Pointcut("dao.filter.data")
            qry.append(${classNameDaoInstance}.getProperty("condition.existing.records.by.${field.fieldName.toLowerCase()}"));
            qry.append(" ");
        }
#end

        List<Map<String, Object>> rows = null;
        rows = getJdbcTemplate().queryForList(qry.toString(), params.toArray());
        populateData(data, rows);
        
        return data;
    }
    
    private void populateData(List<${classNameVo}> data, List<Map<String, Object>> rows) {
        for (Map<String, Object> row : rows) {
            ${classNameVo} singleRow = new ${classNameVo}();
#foreach( ${field} in ${fields} )
#set ($fieldJavaType = "${field.fieldJavaType.substring(0,1).toUpperCase()}${field.fieldJavaType.substring(1)}")
@Pointcut("dao.records.populate")
#end
            data.add(singleRow);
        }
    }
    
}