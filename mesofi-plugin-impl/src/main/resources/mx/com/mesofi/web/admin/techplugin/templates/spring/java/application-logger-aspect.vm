/*
 * COPYRIGHT. Mesofi ${year}. ALL RIGHTS RESERVED.
 *
 * This software is only to be used for the purpose for which it has been
 * provided. No part of it is to be reproduced, disassembled, transmitted,
 * stored in a retrieval system nor translated in any human or computer
 * language in any way or for any other purposes whatsoever without the
 * prior written consent of Mesofi.
 */
package ${packageName}.common;

import java.util.Arrays;

import org.apache.log4j.Logger;

import org.aspectj.lang.JoinPoint;

import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;

/**
 * This class is used to log all the transactions for the application.
 * 
 * @author Mesofi
 * @since ${date}
 */
@Aspect
public class ApplicationLoggerAspect {

    /**
     * log4j.
     */
    private final Logger log = Logger.getLogger(ApplicationLoggerAspect.class);
    
    @Pointcut("execution(* ${packageName}..service.*.*(..))")
    public void loggerPointcut() {
        // nothing to do here.
    }
    
    @Before("loggerPointcut()")
    public void beforeChangesLogger(JoinPoint joinPoint) {
        log.info("Before saving activity into persistence storage...");
        String methodName = joinPoint.getSignature().getName();
        
        log.info("Calling: " + joinPoint.getTarget().getClass().getName() + "." + methodName +  Arrays.toString(joinPoint.getArgs()));
    }
    
    @AfterReturning("loggerPointcut()")
    public void afterChangesLogger(JoinPoint joinPoint) {
        log.info("After saving activity into persistence storage...");
    }
    
    @AfterThrowing(pointcut = "loggerPointcut()", throwing = "ex")
    public void afterExceptionLogger(JoinPoint joinPoint, RuntimeException ex) {
        log.info("After exception, saving error into persistence storage...");
        // do something with this exception
        log.error("An exception has been thrown in " + joinPoint.getSignature().toShortString());
        log.error("Error description: " + ex.getMessage());
    }
    
    /*
     * Uncomment this block if you need a method to be applied as around advice
     @Around("loggerPointcut()")
     public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {
         log.info("The method: " + joinPoint.getSignature().getName() + "() begins with " + Arrays.toString(joinPoint.getArgs()));
         Object result = joinPoint.proceed(); // calls the actual method
         log.info("The method " + joinPoint.getSignature().getName() + "() ends with " + result);
         return result;
    }
    */
}
